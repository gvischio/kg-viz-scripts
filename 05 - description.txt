We combine the data coming from 12 different users to produce 8 different datasets that cover a year-long period instead of the 4-weeks-long original one.

We can think to lots of techniques that can be used to combine the users in the most productive way [eg: document from Matteo].
However, that falls outside the scope of this project (basically, we need data, not coherent data), so we combine the users heuristically.

As a first step, we avoid using the users for which we don't have any location data (poi or gps):
[8, 12, 17, 36, 38, 49, 54, 64, 65, 72, 75, 79, 90, 103, 116, 138]

Then, we use a simple script that creates a dataset that shows the most common location for such user for the labels 'Home' and 'Relatives home'


Combination 1: parent's home in Lombardy/Friuli (+/- same distance from TN):
[13, 24, 30, 40, 53, 77, 93, 107, 118, 126, 136, 155]

Combination 2: parent's home in Veneto
[7, 21, 22, 48, 56, 66, 70, 86, 102, 104, 144, 151]

Combination 3: probably commuters to university >1hour
[5, 41, 43, 55, 82, 117, 121, 122, 132, 133, 135, 148]

Combination 4: probably commuters near Trento
[4, 14, 16, 20, 44, 61, 68, 74, 95, 109, 114, 115]

Combination 5: Centro storico of Trento
[2, 6, 9, 23, 45, 52, 87, 106, 125, 141, 142, 153]

Combination 6: not so Trento city center
[1, 18, 49, 78, 92, 99, 100, 119, 130, 139, 146, 156]


This 6 combinations were made heuristically by combining known values with the explained logic
In addition to those, there were 88 user datasets with non-empty location data that we could use.
We split them into 5 additional combinations, completely random

The final output is:

[[13, 24, 30, 40, 53, 77, 93, 107, 118, 126, 136, 155],
 [7, 21, 22, 48, 56, 66, 70, 86, 102, 104, 144, 151],
 [5, 41, 43, 55, 82, 117, 121, 122, 132, 133, 135, 148],
 [4, 14, 16, 20, 44, 61, 68, 74, 95, 109, 114, 115],
 [2, 6, 9, 23, 45, 52, 87, 106, 125, 141, 142, 153],
 [1, 18, 49, 78, 92, 99, 100, 119, 130, 139, 146, 156],
 [0, 19, 25, 33, 34, 37, 46, 60, 97, 120, 128, 149],
 [11, 15, 50, 62, 63, 101, 110, 111, 113, 127, 150, 157],
 [35, 57, 69, 73, 76, 84, 91, 98, 124, 129, 140, 152],
 [10, 26, 27, 39, 42, 47, 51, 67, 81, 85, 88, 112],
 [29, 31, 58, 59, 80, 94, 96, 105, 131, 137, 145, 154]]


The code used to do this splitting is available in create_combinations.ipynb